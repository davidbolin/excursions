any(is.na(mu.pred[[1]]))
any(is.na(mu.pred[[22]]))
any(is.na(Q[[22]]))
Q[[1]]
library(excursions)
library(excursions)
simconf.mixture(alpha=alpha, mu = mu.pred, Q = Q, w = w)
tmp$result$misc$configs$contents
source('~/hg/Rpackages/excursions/tests/testthat/helper-data.R', echo=TRUE)
tmp <- testdata.inla()
tmp$result$misc$configs$contents$tag
attach("~/Dropbox/research/nongaussian_fields/multivariateFields/code/NCARdata/RData.USmonthlyMet.bin")
ls()
plot( UStinfo[,3:4], col="red", pch=".", cex=2, xlab="", ylab="",
axes=FALSE)
list()
ls()
source('~/Dropbox/research/nongaussian_fields/multivariateFields/code/NCARdata/process.data.R', echo=TRUE)
str(UStmax)
str(UStinfo)
max.temp <- UStmax
min.temp <- UStmin
precip <- USppt
lat <- UStinfo$lat
lon <- UStinfo$lon
str(lat)
str(precip)
str(max.temp)
writeBin(max.temp, con = 'maxTemp', size=8)
maxTemp <- c(dim(max.temp),max.temp)
str(lat)
max.temp <- UStmax
maxTemp <- c(dim(max.temp),max.temp)
writeBin(maxTemp, con = 'maxTemp', size=8)
min.temp <- UStmin
minTemp <- c(dim(min.temp),min.temp)
writeBin(minTemp, con = 'maxTemp', size=8)
lat <- UStinfo$lat
writeBin(lat, con = 'lat', size=8)
lon <- UStinfo$lon
writeBin(lon, con = 'lon', size=8)
elev <- UStinfo$elev
writeBin(elev, con = 'elev', size=8)
writeBin(maxTemp, con = 'maxTemp.bin', size=8)
setwd("~/Dropbox/research/nongaussian_fields/multivariateFields/code/NCARdata/")
max.temp <- UStmax
maxTemp <- c(dim(max.temp),max.temp)
writeBin(maxTemp, con = 'maxTemp.bin', size=8)
min.temp <- UStmin
minTemp <- c(dim(min.temp),min.temp)
writeBin(minTemp, con = 'maxTemp.bin', size=8)
lat <- UStinfo$lat
writeBin(lat, con = 'lat.bin', size=8)
lon <- UStinfo$lon
writeBin(lon, con = 'lon.bin', size=8)
elev <- UStinfo$elev
writeBin(elev, con = 'elev.bin', size=8)
max.temp <- UStmax
maxTemp <- c(dim(max.temp),max.temp)
writeBin(maxTemp, con = 'maxTemp.bin', size=8)
min.temp <- UStmin
minTemp <- c(dim(min.temp),min.temp)
writeBin(minTemp, con = 'minTemp.bin', size=8)
source("~/Desktop/example_lincomb.r")
library("Matrix")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
q
source("~/Desktop/example_lincomb.r")
source("~/Desktop/example_lincomb.r")
install.packages("lme4")
?lme4
library(lme4)
?lme4
man(lme4)
citation(lme4)
citation("lme4")
74/4
79/4
18*4
19*4
15.5+16+17+8
74/4
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ls()
sleepstudy
str(sleepstudy)
source('~/.active-rstudio-document', echo=TRUE)
?lm
source('~/.active-rstudio-document', echo=TRUE)
mod
plot(mod)
str(mod)
plot(mod$fitted.values)
str(mod$fitted.values)
str(sleepstudy)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(fm1)
lines(sleepstudy$Days,mod$fitted.values)
plot(sleepstudy$Days,sleepstudy$Reaction)
mod = lm(Reaction ~ Days, sleepstudy)
lines(sleepstudy$Days,mod$fitted.values)
unique(sleepstudy$Subject)
plot(fm1)
?lme4.plot
source('~/Dropbox/courses/MixedEffects/mixed.demo.R', echo=TRUE)
source('~/Dropbox/courses/MixedEffects/mixed.demo.R', echo=TRUE)
fm3 <- update(fm1, . ~ . - (Days | Subject) + (1 | Subject))
formula(fm3)
fm1
plot(fm1, type = c("p", "smooth"))
plot(fm1, sqrt(abs(resid(.))) ~ fitted(.), type = c("p", "smooth"))
qqmath(fm1, id = 0.05)
library("lme4")
library("lattice")
#intro to data
data("sleepstudy")
str(sleepstudy)
plot(sleepstudy$Days,sleepstudy$Reaction)
mod = lm(Reaction ~ Days, sleepstudy)
lines(sleepstudy$Days,mod$fitted.values)
unique(sleepstudy$Subject)
length(unique(sleepstudy$Subject))
plot
plot(sleepstudy$Days,sleepstudy$Reaction)
plot(sleepstudy$Days,sleepstudy$Reaction)
xlabel("Days")
ylabel("Response time (ms)")
?plot
plot(sleepstudy$Days,sleepstudy$Reaction)
xlab("Days")
ylab("Response time (ms)")
plot(sleepstudy$Days,sleepstudy$Reaction, xlab = "Days", ylab = "Response time (ms)")
lines(sleepstudy$Days,mod$fitted.values)
fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
xyplot(Reaction ~ Days | Subject, sleepstudy, aspect = "xy",
layout = c(9, 2), type = c("g", "p", "r"),
index.cond = function(x, y) coef(lm(y ~ x))[2],
xlab = "Days of sleep deprivation",
ylab = "Average reaction time (ms)",
as.table = TRUE)
xyplot(Reaction ~ Days | Subject, sleepstudy, aspect = "xy",
layout = c(9, 2), type = c("g", "p", "r"),
xlab = "Days of sleep deprivation",
ylab = "Average reaction time (ms)",
as.table = TRUE)
xyplot(sleepstudy, aspect = "xy",
layout = c(9, 2), type = c("g", "p", "r"),
index.cond = function(x, y) coef(lm(y ~ x))[2],
xlab = "Days of sleep deprivation",
ylab = "Average reaction time (ms)",
as.table = TRUE)
xyplot(Reaction ~ Days | Subject, sleepstudy, aspect = "xy",
layout = c(9, 2), type = c("g", "p", "r"),
index.cond = function(x, y) coef(lm(y ~ x))[2],
xlab = "Days of sleep deprivation",
ylab = "Average reaction time (ms)",
as.table = TRUE)
fm1
str(fm1)
fm1
fm3 <- lmer(Reaction ~ Days + (1 | Subject), sleepstudy)
xyplot(Reaction ~ Days + (1 | Subject), sleepstudy, aspect = "xy",
layout = c(9, 2), type = c("g", "p", "r"),
index.cond = function(x, y) coef(lm(y ~ x))[2],
xlab = "Days of sleep deprivation",
ylab = "Average reaction time (ms)",
as.table = TRUE)
pr1 <- profile(fm1)
plot(pr1)
confint(pr1)
xyplot(pr01, aspect = 1.3)
xyplot(pr1, aspect = 1.3)
xyplot(pr1)
ranef(fm1)
plot(ranef(fm1))
dotplot(ranef(fm1))
dotplot(ranef(fm1,postVar = TRUE))
qqmatch(ranef(fm1,postVar = TRUE))
qqmath(ranef(fm1,postVar = TRUE))
dotplot(ranef(fm1,postVar = TRUE))
?dotplot
dotplot(ranef(fm1,postVar = TRUE))
dotplot(ranef(fm1,postVar = TRUE),ylim = c(0,10))
dotplot(ranef(fm1,postVar = TRUE),xlim = c(0,10))
dotplot(ranef(fm1,postVar = TRUE))
?randef
?randef
?ranef
dotplot(ranef(fm1,condVar = TRUE))
?ranef
dotplot(ranef(fm1,condVar = TRUE,whichel=Intercept))
dotplot(ranef(fm1,condVar = TRUE,whichel='Days'))
dotplot(ranef(fm1,condVar = TRUE,whichel=Days))
dotplot(ranef(fm1,condVar = TRUE,whichel='Days''))
)
)
dotplot(ranef(fm1,condVar = TRUE,whichel='Days''))
dotplot(ranef(fm1,condVar = TRUE,whichel='Days'))
str(fm1)
names(fm1)
rr1 <- ranef(fm1, condVar = TRUE)
dotplot(rr1,scales = list(x = list(relation = 'free')))[["Subject"]]
rr1 <- ranef(fm1, condVar = TRUE)
dotplot(rr1,scales = list(x = list(relation = 'free')))
dotplot(rr1,scales = list(x = list(relation = 'free')))
fm04 <- lmer(strength ~ 1 + (1|sample) + (1|batch), Pastes, REML=FALSE)
fm3 <- lmer(strength ~ 1 + (1|cask) + (1|batch:cask), Pastes)
fm3
fm3 <- lmer(strength ~ 1 + (1|cask) + (1|batch:cask), Pastes,REML=FALSE)
fm3
fm3 <- lmer(strength ~ 1 + (1|batch) + (1|batch:cask), Pastes)
fm3
fm3 <- lmer(strength ~ 1 + (1|batch) + (1|batch:cask), Pastes,REML=FALSE)
fm3
fm3 <- lmer(strength ~ 1 + (1|batch) + (1|batch:cask), Pastes,REML=FALSE)
fm3
fm3 <- lmer(strength ~ 1 + (1|batch) + (1|batch:cask), Pastes,REML=FALSE)
pr3 <- profile(fm3)
confint(pr3)
fm3 <- lmer(strength ~ 1 + (1|batch) + (1|batch:cask), Pastes,REML=FALSE)
pr3 <- profile(fm3)
fm4 <- lmer(strength ~ 1 + (1|batch:cask), Pastes,REML=FALSE)
anova(fm3,fm4)
plot(fm1, type = c("p", "smooth"))
plot(fm1, sqrt(abs(resid(.))) ~ fitted(.), type = c("p", "smooth"))
qqmath(fm1, id = 0.05)
plot(fm1, type = c("p", "smooth"))
plot(fm1, type = c("p", "smooth"))
qqmath(fm1, id = 0.05)
Penicillin$diameter
plot(Penicillin$plate,Penicillin$diameter
)
plot(Penicillin$plate,Penicillin$diameter)
Penicillin$plate
plot(Penicillin$plate,Penicillin$diameter,pch=1)
plot(Penicillin$plate,Penicillin$diameter,lty=1)
?plot
plot(Penicillin$plate,Penicillin$diameter,type=p)
plot(Penicillin$plate,Penicillin$diameter,type="p")
plot(Penicillin)
Penicillin
xtabs(~sample + plate,Penicillin)
plot(Penicillin)
?Penicillin
setwd("s")
setwd("~/Dropbox/research/nongaussian_fields/NonGaussianLDA/OA Functions/")
source("nglda_est.R")
source("print.nglda_est.R")
source("summary.nglda_est.R")
source("print.summary.nglda_est.R")
source("fitted.nglda_est.R")
source("residuals.nglda_est.R")
source("intervals.R")
source("print.intervals.R")
source("plot.nglda_est.R")
source("nglda_predict.R")
source("print.nglda_predict.R")
source("plot.nglda_predict.R")
srft_fit <- nglda_est(
random = ~ Days + (Days | Subject),
data = srft_data_sub,
reffects = "Normal",
error = "tdist",
timeVar = srft_data_sub$fu,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30),
other.controls = list(estimate.fisher = T)
)
srft_fit <- nglda_est(
random = ~ Days + (Days | Subject),
data = sleepstudy,
reffects = "Normal",
error = "tdist",
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30),
other.controls = list(estimate.fisher = T)
)
srft_fit <- nglda_est(
fixed = Reaction ~ Days
random = ~ (Days | Subject),
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = F,
estimation.controls = list(nIter = 1000, nIter.fisher = 30),
other.controls = list(estimate.fisher = T)
)
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ (Days | Subject),
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = F,
estimation.controls = list(nIter = 1000, nIter.fisher = 30),
other.controls = list(estimate.fisher = T)
)
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ (Days | Subject),
data = sleepstudy,
reffects = "Normal",
error = "tdist",
use.process = F,
estimation.controls = list(nIter = 1000, nIter.fisher = 30),
other.controls = list(estimate.fisher = T)
)
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ (Days | Subject),
data = sleepstudy,
reffects = "Normal",
error = "tdist",
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
sleepstudy
str(sleepstudy)
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
library(LDMod)
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ Days + Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ Days + Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~ Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
str(sleepstudy)
srft_data <- read.csv("srft.data.csv", header = T)
set.seed(123)
rs_id <- sample(unique(srft_data$id), 100, replace = F)
srft_data_sub <- srft_data[srft_data$id %in% rs_id, ]
setwd("../Renal progression data set/")
srft_data <- read.csv("srft.data.csv", header = T)
set.seed(123)
rs_id <- sample(unique(srft_data$id), 100, replace = F)
srft_data_sub <- srft_data[srft_data$id %in% rs_id, ]
str(srft_data_sub)
str(sleepstudy)
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
srft_fit <- nglda_est(
fixed = Reaction ~ Days,
random = ~Days|Subject,
data = sleepstudy,
reffects = "Normal",
error = "tdist",
timeVar = sleepstudy$Days,
use.process = FALSE,
estimation.controls = list(nIter = 1000, nIter.fisher = 30))
str(BB)
str(mixedEffect_list$B_random)
str(mixedEffect_list$B_random[[i]])
str(BB)
str(Y[[i]])
str(br)
str(br[i,])
BB%*%t(mixedEffect_list$B_random[[i]])
str(BB%*%t(mixedEffect_list$B_random[[i]]))
BB%*%t(mixedEffect_list$B_random[[i]])%*%(Y[[i]] - mixedEffect_list$B_fixed[[i]]%*%mixedEffect_list$beta_fixed)
mixedEffect_list$B_fixed[[i]]%*%mixedEffect_list$beta_fixed
mixedEffect_list$beta_fixed
mixedEffect_list$B_fixed[[i]]%*%mixedEffect_list$beta_fixed
Y[[i]] - mixedEffect_list$B_fixed[[i]]%*%mixedEffect_list$beta_fixed
Y[[i]]
mixedEffect_list$B_fixed[[i]]%*%mixedEffect_list$beta_fixed
str(Y)
str(sleepstudy)
str(sleepstudy$Subject)
str(unique(sleepstudy$Subject))
length(unique(sleepstudy$Subject))
ui = unique(sleepstudy$Subject)
ui
ui = unique(sleepstudy$Subject)
for(i in 1:18)
{
ind = sleepstudy$Subject == ui[i]
n.obs = sum(ind)
B_random[[i]] <- cbind(rep(1,n.obs),sleepstudy$Days[ind])
Y[[i]] <- sleepstudy$Reaction[ind]
}
B_random <- Y < list()
for(i in 1:18)
{
ind = sleepstudy$Subject == ui[i]
n.obs = sum(ind)
B_random[[i]] <- cbind(rep(1,n.obs),sleepstudy$Days[ind])
Y[[i]] <- sleepstudy$Reaction[ind]
}
B_random <- Y <- list()
for(i in 1:18)
{
ind = sleepstudy$Subject == ui[i]
n.obs = sum(ind)
B_random[[i]] <- cbind(rep(1,n.obs),sleepstudy$Days[ind])
Y[[i]] <- sleepstudy$Reaction[ind]
}
res.est <- estimate.wrapper(Y = Y,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "NIG",
estimation.options = list(nIter.gauss = 10,nIter = nIter,
pSubsample = pSubsample,
nPar_burnin = nPar_burnin))
res.est <- estimate.wrapper(Y = Y,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "NIG",
estimation.options = list(nIter.gauss = 10,nIter = 1000,
pSubsample = pSubsample,
nPar_burnin = nPar_burnin))
res.est <- estimate.wrapper(Y = Y,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "NIG")
res.est <- estimate.wrapper(Y = Y,
B_fixed = B_random,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "NIG")
Y
B_random
res.est <- estimate.wrapper(Y = Y,
B_fixed = B_random,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "NIG")
res.est <- estimate.wrapper(Y = Y,
B_fixed = B_random,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "Normal")
BB
res.est <- estimate.wrapper(Y = Y,
B_fixed = NULL,
B_random= B_random,
use.process = FALSE,
measurement.distribution = "Normal")
